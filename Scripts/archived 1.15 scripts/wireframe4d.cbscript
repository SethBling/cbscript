dir "C:\Users\Seth\AppData\Roaming\.minecraft 1.14\saves\SethBling's World 1.14"
desc "Render 4d objects in 3d space as wireframes"

import math
import common

$BaseX = -107000
$BaseY = 78000
$BaseZ = 80000

$Materials = [
	'blaze_rod',
	'diamond_sword',
	'golden_sword',
	'iron_sword',
	'wooden_sword',
	'stone_sword',
	'stick',
]
$MaxSegments = 13

$NumLines = 40

# Animation IDs
$RandomSpin = 1
$Bounce = 2

array segments[$NumLines]
array length[$NumLines]
array base_x[$NumLines]
array base_y[$NumLines]
array unit_x[$NumLines]
array unit_y[$NumLines]
array pose_angle[$NumLines]

define @Line : @Entity[type=area_effect_cloud,tag=Line]
	create {Tags:["Line"], Duration:-1,Age:-2147483648,WaitTime:-2147483648}

	function get_transformed_pos()
		<tpos> = @s.<pos1>
		apply_animation()
		apply_camera_transform()
		<x1, y1, z1> = <tpos>

		<tpos> = @s.<pos2>
		apply_animation()
		apply_camera_transform()
		<x2, y2, z2> = <tpos>
	end

	function apply_animation()
		switch Animation
			case $RandomSpin
				random_spin_transform()
			end
			case $Bounce
				slime_jump_transform()
			end
		end
	end

	function random_spin_transform()
		rotate_around_z_axis(t*2/3)
		rotate_around_y_axis(t)
		rotate_around_x_axis(t/2)
		<tpos> += <sin(2*t), sin(3*t), 2*sin(t*5/3)+3000>
	end

	function slime_jump_transform()
		if t < 10
			<x, y, z> = <tpos>
			<tpos> = <x*(t+10)/10, y*(15-t)/15, z*(t+10)/10>
		else if t >= 10 and t < 20
			dt = t - 10
			<x, y, z> = <tpos>
			<tpos> = <x*(20-dt)/10, y*(5+dt)/15, z*(20-dt)/10>
		else if t >= 20 and t <= 100
			dt = t - 60
			<tpos> += <0, 20 * (1600 - dt * dt), 0>
		else
			t = 0
		end
	end

	function get_perspective_pos()
		pz1 = z1 + 500
		px1 = x1 * 10000 / pz1
		py1 = y1 * 10000 / pz1

		pz2 = z2 + 500
		px2 = x2 * 10000 / pz2
		py2 = y2 * 10000 / pz2

		dpx = px2 - px1
		dpy = py2 - py1
		length = sqrt(dpx^2 + dpy^2)

		unit_x = dpx * 1000 / length
		unit_y = dpy * 1000 / length
	end

	function get_angles_and_angle_offsets()
		as @Position
			/tp @s ~ ~ ~
			@s.x += unit_x
			@s.z += unit_y
			facing @s
				/tp @s ~ ~ ~ ~ ~
				angle = @s.ry
				pose_angle = 260000 - angle
			end

			# Get offset from shoulder to tip of arm
			@s.ry = angle + 100000
			<pos1> = @s.<pos>
			move @s ^ ^ ^0.6
			<ox, oy, oz> = @s.<pos> - <pos1>
		end
	end

	function render_line()
		@s.get_transformed_pos()

		if z1 >= 0 and z2 >= 0
			@s.get_perspective_pos()
			if px1 >= -30000 and px1 <= 30000 and px2 >= -30000 and px2 <= 30000 and py1 >= -20000 and py1 <= 20000 and py2 >= -20000 and py2 <= 20000
				@s.get_angles_and_angle_offsets()

				segments = length / 1000
				id = &@s

				base_x = $BaseX + px1 + 250 + ox
				base_y = $BaseY + py1 - 1600 + oz

				store_line_properties()
			else
				segments = -1
				store_line_properties()
			end
		else
			segments = -1
			store_line_properties()
		end
	end
end

define @Segment : @Entity[type=armor_stand, tag=Segment]
	create {
		Tags:["Segment"],
		Pose:{
			RightArm: [-10f,-90f,0f]
		},
		NoGravity:1,
		ShowArms:1b,
		Marker:1b,
		Invisible:1b,
		NoGravity:1b,
		Invulnerable:1b,
		Silent:1b
	}
	pose_angle: Pose.RightArm[0] float 1000

	function hide()
		unless not @s.was_visibile
			/replaceitem entity @s weapon.mainhand air
			@s.was_visibile = False
		end
	end

	function show()
		unless @s.was_visibile
			switch @s.material
				case -1
					switch Material
						case $i in $range($len($Materials))
							$item_name = $Materials[$i]
							/replaceitem entity @s weapon.mainhand $item_name
						end
					end
				end
				case $i in $range($len($Materials))
					$item_name = $Materials[$i]
					/replaceitem entity @s weapon.mainhand $item_name
				end
			end
			@s.was_visibile = True
		end
	end

	function render_segment()
		get_line_properties()

		if @s.segment <= segments + 2
			if @s.segment > 0 and (@s.segment+1) * 1000 - 150 > length
				# special case for over-extension
				seg_off = (segments - 1) * 1000 + length % 1000 + 150
			else
				seg_off = @s.segment * 1000 + 150
			end

			if @s.segment <= segments
				@s.show()
			else
				@s.hide()
			end

			@s.x = base_x + unit_x * seg_off / 1000
			@s.y = base_y + unit_y * seg_off / 1000

			@s.pose_angle = pose_angle
		else
			@s.hide()
		end
	end
end

function create_die_faces()
	# 1
	material = 1
	<pos1> = <0, 100, 4000>
	<pos2> = <0, -100, 4000>
	create_line()

	#6
	material = 6
	<pos1> = <-2000, -2100, -4000>
	<pos2> = <-2000, -1900, -4000>
	create_line()

	<pos1> = <0, -2100, -4000>
	<pos2> = <0, -1900, -4000>
	create_line()

	<pos1> = <2000, -2100, -4000>
	<pos2> = <2000, -1900, -4000>
	create_line()

	<pos1> = <-2000, 1900, -4000>
	<pos2> = <-2000, 2100, -4000>
	create_line()

	<pos1> = <0, 1900, -4000>
	<pos2> = <0, 2100, -4000>
	create_line()

	<pos1> = <2000, 1900, -4000>
	<pos2> = <2000, 2100, -4000>
	create_line()

	#2
	material = 2
	<pos1> = <-2000, 4000, -2100>
	<pos2> = <-2000, 4000, -1900>
	create_line()

	<pos1> = <2000, 4000, 2100>
	<pos2> = <2000, 4000, 1900>
	create_line()

	#5
	material = 5
	<pos1> = <-2000, -4000, -2100>
	<pos2> = <-2000, -4000, -1900>
	create_line()

	<pos1> = <2000, -4000, -2100>
	<pos2> = <2000, -4000, -1900>
	create_line()

	<pos1> = <2000, -4000, 1900>
	<pos2> = <2000, -4000, 2100>
	create_line()

	<pos1> = <-2000, -4000, 1900>
	<pos2> = <-2000, -4000, 2100>
	create_line()

	<pos1> = <0, -4000, -100>
	<pos2> = <0, -4000, 100>
	create_line()

	#3
	material = 3
	<pos1> = <4000, 0, -100>
	<pos2> = <4000, 0, 100>
	create_line()

	<pos1> = <4000, -2000, -2100>
	<pos2> = <4000, -2000, -1900>
	create_line()

	<pos1> = <4000, 2000, 1900>
	<pos2> = <4000, 2000, 2100>
	create_line()

	#4
	material = 4
	<pos1> = <-4000, -2000, -2100>
	<pos2> = <-4000, -2000, -1900>
	create_line()

	<pos1> = <-4000, 2000, 1900>
	<pos2> = <-4000, 2000, 2100>
	create_line()

	<pos1> = <-4000, 2000, -2100>
	<pos2> = <-4000, 2000, -1900>
	create_line()

	<pos1> = <-4000, -2000, 1900>
	<pos2> = <-4000, -2000, 2100>
	create_line()
end

function create_cube(radius)
	material = -1

	# Y Axis
	<pos1> = <-radius, -radius, -radius>
	<pos2> = <-radius, radius, -radius>
	create_line()

	<pos1> = <-radius, -radius, radius>
	<pos2> = <-radius, radius, radius>
	create_line()

	<pos1> = <radius, -radius, -radius>
	<pos2> = <radius, radius, -radius>
	create_line()

	<pos1> = <radius, -radius, radius>
	<pos2> = <radius, radius, radius>
	create_line()

	# X Axis
	<pos1> = <-radius, -radius, -radius>
	<pos2> = <radius, -radius, -radius>
	create_line()

	<pos1> = <-radius, -radius, radius>
	<pos2> = <radius, -radius, radius>
	create_line()

	<pos1> = <-radius, radius, -radius>
	<pos2> = <radius, radius, -radius>
	create_line()

	<pos1> = <-radius, radius, radius>
	<pos2> = <radius, radius, radius>
	create_line()

	# Z Axis
	<pos1> = <-radius, -radius, -radius>
	<pos2> = <-radius, -radius, radius>
	create_line()

	<pos1> = <-radius, radius, -radius>
	<pos2> = <-radius, radius, radius>
	create_line()

	<pos1> = <radius, -radius, -radius>
	<pos2> = <radius, -radius, radius>
	create_line()

	<pos1> = <radius, radius, -radius>
	<pos2> = <radius, radius, radius>
	create_line()
end

function create_creeper_face()
	material = -1

	# Left Eye
	<pos1> = <-3000, 2000, 4000>
	<pos2> = <-1000, 2000, 4000>
	create_line()

	<pos1> = <-3000, 2000, 4000>
	<pos2> = <-3000, 0000, 4000>
	create_line()

	<pos1> = <-1000, 2000, 4000>
	<pos2> = <-1000, -1000, 4000>
	create_line()

	# Right Eye
	<pos1> = <3000, 2000, 4000>
	<pos2> = <1000, 2000, 4000>
	create_line()

	<pos1> = <3000, 2000, 4000>
	<pos2> = <3000, 0000, 4000>
	create_line()

	<pos1> = <1000, 2000, 4000>
	<pos2> = <1000, -1000, 4000>
	create_line()

	# Mouth

	# Top of mouth + bottom of eyes
	<pos1> = <-3000, 0000, 4000>
	<pos2> = <3000, 0000, 4000>
	create_line()

	<pos1> = <-2000, -1000, 4000>
	<pos2> = <-1000, -1000, 4000>
	create_line()

	<pos1> = <2000, -1000, 4000>
	<pos2> = <1000, -1000, 4000>
	create_line()

	<pos1> = <-2000, -1000, 4000>
	<pos2> = <-2000, -4000, 4000>
	create_line()

	<pos1> = <2000, -1000, 4000>
	<pos2> = <2000, -4000, 4000>
	create_line()

	<pos1> = <-1000, -3000, 4000>
	<pos2> = <-1000, -4000, 4000>
	create_line()

	<pos1> = <1000, -3000, 4000>
	<pos2> = <1000, -4000, 4000>
	create_line()

	<pos1> = <-1000, -3000, 4000>
	<pos2> = <1000, -3000, 4000>
	create_line()
end

function spawn_cube()
	delete_object()
	create_cube(4000)
end

function spawn_tie_fighter()
	delete_object()
	create_tie_fighter()
end

macro $create_line($x1, $y1, $z1, $x2, $y2, $z2)
	<pos1> = <$x1, $y1, $z1>
	<pos2> = <$x2, $y2, $z2>
	create_line()
end

function create_tie_fighter()

	create_cube(1500)

	# Wing arms
	$create_line(1500, 1500, 1500, 6000, 800, 800)
	$create_line(1500, -1500, 1500, 6000, -800, 800)
	$create_line(1500, 1500, -1500, 6000, 800, -800)
	$create_line(1500, -1500, -1500, 6000, -800, -800)
	$create_line(-1500, 1500, 1500, -6000, 800, 800)
	$create_line(-1500, -1500, 1500, -6000, -800, 800)
	$create_line(-1500, 1500, -1500, -6000, 800, -800)
	$create_line(-1500, -1500, -1500, -6000, -800, -800)

	for $m in [-1, 1]
		$create_line(-6000*$m, -2000, -4000, -6000*$m, 2000, -4000)
		$create_line(-6000*$m, -2000, 4000, -6000*$m, 2000, 4000)
		$create_line(-6000*$m, 2000, -4000, -3800*$m, 4000, -3000)
		$create_line(-6000*$m, -2000, -4000, -3800*$m, -4000, -3000)
		$create_line(-6000*$m, 2000, 4000, -3800*$m, 4000, 3000)
		$create_line(-6000*$m, -2000, 4000, -3800*$m, -4000, 3000)
		$create_line(-3800*$m, 4000, -3000, -3800*$m, 4000, 3000)
		$create_line(-3800*$m, -4000, -3000, -3800*$m, -4000, 3000)
		$create_line(-6000*$m, 2000, -4000, -6000*$m, 2000, 4000)
		$create_line(-6000*$m, -2000, -4000, -6000*$m, -2000, 4000)
	end
end

function delete_object()
	/kill @Line
	/kill @Segment

	line_id = 0
end

reset
	spawn_cube(4000)
	#spawn_tie_fighter()

	<camera_pos> = <0, 0, -10000>
	camera_rx = 0
	camera_ry = 0

	as @Player
		draw_buttons()
	end

	unless Material >= 0
		Material = 0
	end
end

function create_line()
	as create @Line
		@s.<pos1> = <pos1>
		@s.<pos2> = <pos2>

		<delta> = <pos1> - <pos2>
		length = sqrt(<delta>*<delta>)

		id = &@s
		@s.line_id = line_id
		for i = 0 to (length * 2 / 1000)
			as create @Segment
				@s.line = id
				@s.segment = i
				@s.material = material
				@s.line_id = line_id

				@s.<pos> = <$BaseX, $BaseY, $BaseZ>
				move @s ~ ~ ~
			end
		end
	end

	line_id++
end

function rotate_around_z_axis(a)
	<x, y, z> = <tpos>
	<tpos> = <cos(a)*x-sin(a)*y, sin(a)*x+cos(a)*y, z*1000> / 1000
end

function rotate_around_y_axis(a)
	<x, y, z> = <tpos>
	<tpos> = <cos(a)*x-sin(a)*z, y*1000, sin(a)*x+cos(a)*z> / 1000
end

function rotate_around_x_axis(a)
	<x, y, z> = <tpos>
	<tpos> = <x*1000, cos(a)*y-sin(a)*z, sin(a)*y+cos(a)*z> / 1000
end

function store_line_properties()
	switch @s.line_id
		case $i in $range($NumLines)
			segments[$i] = segments
			length[$i] = length
			base_x[$i] = base_x
			base_y[$i] = base_y
			unit_x[$i] = unit_x
			unit_y[$i] = unit_y
			pose_angle[$i] = pose_angle
		end
	end
end

function get_line_properties()
	switch @s.line_id
		case $i in $range($NumLines)
			segments = segments[$i]
			length = length[$i]
			base_x = base_x[$i]
			base_y = base_y[$i]
			unit_x = unit_x[$i]
			unit_y = unit_y[$i]
			pose_angle = pose_angle[$i]
		end
	end
end

clock main
	/gamerule sendCommandFeedback false

	unless @Position do create @Position
	unless @Position2 do create @Position2

	t += 2

	@Line.render_line()
	@Segment.render_segment()

	if AngleUp then camera_rx -= 2000
	if AngleDown then camera_rx += 2000
	if AngleLeft then camera_ry -= 2000
	if AngleRight then camera_ry += 2000

	<up> = <0, 500, 0>
	<forward> = <sin(camera_ry/1000)/2, 0, cos(camera_ry/1000)/2>
	<left> = <cos(camera_ry/1000)/2, 0, -sin(camera_ry/1000)/2>

	if MoveForward then <camera_pos> += <forward>
	if MoveBackward then <camera_pos> -= <forward>
	if MoveLeft then <camera_pos> -= <left>
	if MoveRight then <camera_pos> += <left>
	if MoveUp then <camera_pos> += <up>
	if MoveDown then <camera_pos> -= <up>
end

function apply_camera_transform()
	<tpos> -= <camera_pos>
	rotate_around_y_axis(camera_ry/1000)
	rotate_around_x_axis(-camera_rx/1000)
end

function draw_buttons()
	tell @s     '\          {WLook'
	if AngleUp
		tell @s "\          {W[\[UP\]](call angle_up)"
	else
		tell @s "\          {w[\[up\]](call angle_up)"
	end

	if AngleLeft
		tell @s "\     {W[\[LEFT\]](call angle_left) {w[\[right\]](call angle_right)"
	else if AngleRight
		tell @s "\     {w[\[left\]](call angle_left) {W[\[RIGHT\]](call angle_right)"
	else
		tell @s "\     {w[\[left\]](call angle_left) {w[\[right\]](call angle_right)"
	end

	if AngleDown
		tell @s "\         {W[\[DOWN\]](call angle_down)"
	else
		tell @s "\         {w[\[down\]](call angle_down)"
	end

	tell @s     '\          {YMove'

	if MoveForward
		tell @s "{Y[\[FORWARD\]](call move_forward) {y[\[backward\]](call move_backward)"
	else if MoveBackward
		tell @s "{y[\[forward\]](call move_forward) {Y[\[BACKWARD\]](call move_backward)"
	else
		tell @s "{y[\[forward\]](call move_forward) {y[\[backward\]](call move_backward)"
	end

	if MoveUp
		tell @s "\          {Y[\[UP\]](call move_up)"
	else
		tell @s "\          {y[\[up\]](call move_up)"
	end

	if MoveLeft
		tell @s "\     {Y[\[LEFT\]](call move_left) {y[\[right\]](call move_right)"
	else if MoveRight
		tell @s "\     {y[\[left\]](call move_left) {Y[\[RIGHT\]](call move_right)"
	else
		tell @s "\     {y[\[left\]](call move_left) {y[\[right\]](call move_right)"
	end

	if MoveDown
		tell @s "\         {Y[\[DOWN\]](call move_down)"
	else
		tell @s "\         {y[\[down\]](call move_down)"
	end
end

function toggle(p)
	if p
		return False
	else
		return True
	end
end

function angle_up()
	AngleDown = False
	AngleUp = toggle(AngleUp)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function angle_down()
	AngleUp = False
	AngleDown = toggle(AngleDown)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function angle_left()
	AngleRight = False
	AngleLeft = toggle(AngleLeft)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function angle_right()
	AngleLeft = False
	AngleRight = toggle(AngleRight)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function move_forward()
	MoveBackward = False
	MoveForward = toggle(MoveForward)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function move_backward()
	MoveForward = False
	MoveBackward = toggle(MoveBackward)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function move_up()
	MoveDown = False
	MoveUp = toggle(MoveUp)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function move_down()
	MoveUp = False
	MoveDown = toggle(MoveDown)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function move_left()
	MoveRight = False
	MoveLeft = toggle(MoveLeft)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function move_right()
	MoveLeft = False
	MoveRight = toggle(MoveRight)
	/gamerule sendCommandFeedback false
	draw_buttons()
end

function destroy()
	/kill @Line
	/kill @Segment
end
