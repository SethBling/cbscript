import transforms

function colliders_physics_tick()
    unless colliders.physics_tick == 0
        # Apply the physics tick
        for collider = 1 to max_collider
            with
                $(collider) = collider
            do
                define name collider = "collider_$(collider)"

                if not collider.sleeping
                    collider_physics_tick() with macros
                end
            end
        end
    end

    unless colliders.buoyancy == 0
        # Apply buoyancy and drag for any colliders in water
        apply_buoyancy()
    end

    # Update the penetration and normal for active collisions
    update_active_collisions()
end

function colliders_get_new_collisions()
    unless colliders.world_collisions == 0
        # Get collisions between colliders and the world
        for collider = 1 to max_collider
            with
                $(collider) = collider
            do
                define name collider = "collider_$(collider)"

                if not collider.sleeping
                    # New collisions
                    get_collider_world_collisions() with macros
                end
            end
        end
    end

    unless colliders.c_c_collisions == 0
        # Get collisions between each pair of colliders
        for col1 = 1 to max_collider
            for col2 = col1+1 to max_collider
                with
                    $(collider1) = col1
                    $(collider2) = col2
                get_collider_collider_collision()
            end
        end
    end
end

function colliders_resolve_collisions()
    # Remove all new collisions, except for new collisions that have
    # the deepest penetration for a collider
    cull_collisions()

    # Merge collision indices down so that there aren't any empties
    merge_collisions_down()

    # Resolve collisions
    resolve_collision_velocity()
    resolve_collision_penetration()
end

function colliders_finalize_tick()
    # Final collider update to render and check for sleeping
    for collider = 1 to max_collider
        with
            $(collider) = collider
        do
            define name collider = "collider_$(collider)"

            if not collider.sleeping
                collider_set_transform() with macros
                collider_check_sleep() with macros
            end
        end
    end
end

function destroy_colliders()
    for collider = max_collider to 1 by -1
        with
            $(collider) = collider
        destroy_collider()
    end

    /kill @PhysicsBlock

    max_collider = 0

    delete_collisions()
end

function destroy_collider()
    define name collider = "collider_$(collider)"

    id = collider.id

    if max_collider == id
        max_collider--
    end

    as @PhysicsBlock
        if @s.collider_id == id
            /kill @s
        end
    end

    /scoreboard players reset collider_$(collider)

    for vertex = 0 to 7
        with
            $(vertex) = vertex
        do
            /scoreboard players reset collider_$(collider)_v$(vertex)
        end
    end

    for axis = 0 to 2
        with
            $(axis) = axis
        do
            /scoreboard players reset collider_$(collider)_a$(axis)
        end
    end
end

function add_collider(x, y, z)
    id = get_unused_collider_id()

    with
        $(collider) = id
    create_collider(x, y, z, CubeSize, CubeInvMass, CubeInvRotInt)

    unless id <= max_collider
        max_collider = id
    end
end

function get_unused_collider_id()
    for collider = 1 to max_collider+1
        with
            $(collider) = collider
        do
            define name collider = "collider_$(collider)"
            unless collider.inv_mass
                return_id = collider
                collider = 1000000000
            end
        end
    end

    return return_id
end

function clear_save_state()
    for collider_iter = 1 to save_state.max_collider
        with
            $(collider) = collider_iter
        do
            /scoreboard players reset save_state_collider_$(collider)
        end
    end

    for collision_iter = 1 to save_state.max_collision
        with
            $(collision) = collision_iter
        do
            /scoreboard players reset save_state_collision_$(collision)
        end
    end

    /scoreboard players reset save_state
end

function save_state()
    clear_save_state()

    save_state.max_collider = max_collider

    for collider_iter = 1 to max_collider
        with
            $(collider) = collider_iter
        do
            define name collider = "collider_$(collider)"
            define name save_state = "save_state_collider_$(collider)"

            if collider.id
                save_state.id = collider.id

                save_state.x = collider.x
                save_state.y = collider.y
                save_state.z = collider.z

                save_state.velocity_x = collider.velocity_x
                save_state.velocity_y = collider.velocity_y
                save_state.velocity_z = collider.velocity_z

                save_state.rotation_x = collider.rotation_x
                save_state.rotation_y = collider.rotation_y
                save_state.rotation_z = collider.rotation_z

                save_state.size = collider.size

                save_state.inv_mass = collider.inv_mass
                save_state.inv_rot_int = collider.inv_rot_int

                save_state.w = collider.w
                save_state.i = collider.i
                save_state.j = collider.j
                save_state.k = collider.k

                save_state.recent_motion = collider.recent_motion
                save_state.recent_rotation = collider.recent_rotation
                save_state.sleeping = collider.sleeping
            end
        end
    end

    save_state.max_collision = max_collision

    for collision_iter = 1 to max_collision
        with
            $(collision) = collision_iter
        do
            define name collision = "collision_$(collision)"
            define name save_state = "save_state_collision_$(collision)"

            if collision.active
                save_state.id = collision.id
                save_state.active = collision.active
                save_state.pen = collision.pen

                save_state.x = collision.x
                save_state.y = collision.y
                save_state.z = collision.z

                save_state.nx = collision.nx
                save_state.ny = collision.ny
                save_state.nz = collision.nz

                save_state.type = collision.type
                save_state.collider1 = collision.collider1
                save_state.collider2 = collision.collider2
                save_state.vertex = collision.vertex
                save_state.vertex1 = collision.vertex1
                save_state.vertex2 = collision.vertex2
                save_state.nvert1 = collision.nvert1
                save_state.nvert2 = collision.nvert2
                save_state.block_x = collision.block_x
                save_state.block_y = collision.block_y
                save_state.block_z = collision.block_z
                save_state.lnx = collision.lnx
                save_state.lny = collision.lny
                save_state.lnz = collision.lnz
                save_state.ox = collision.ox
                save_state.oy = collision.oy
                save_state.oz = collision.oz
                save_state.ex = collision.ex
                save_state.ey = collision.ey
                save_state.ez = collision.ez
            end
        end
    end
end

function load_state()
    destroy_colliders()
    delete_collisions()

    collision_frame = 0

    max_collider = save_state.max_collider

    for collider_iter = 1 to save_state.max_collider
        with
            $(collider) = collider_iter
        do
            define name collider = "collider_$(collider)"
            define name save_state = "save_state_collider_$(collider)"

            if save_state.id
                create_collider(save_state.x, save_state.y, save_state.z, save_state.size, save_state.inv_mass, save_state.inv_rot_int) with macros

                collider.velocity_x = save_state.velocity_x
                collider.velocity_y = save_state.velocity_y
                collider.velocity_z = save_state.velocity_z

                collider.rotation_x = save_state.rotation_x
                collider.rotation_y = save_state.rotation_y
                collider.rotation_z = save_state.rotation_z

                collider.w = save_state.w
                collider.i = save_state.i
                collider.j = save_state.j
                collider.k = save_state.k

                collider_quaternion_to_transform() with macros

                collider.recent_motion = save_state.recent_motion
                collider.recent_rotation = save_state.recent_rotation
                collider.sleeping = save_state.sleeping

                collider_set_transform() with macros
            end
        end
    end

    max_collision = save_state.max_collision

    for collision_iter = 1 to save_state.max_collision
        with
            $(collision) = collision_iter
        do
            define name collision = "collision_$(collision)"
            define name save_state = "save_state_collision_$(collision)"

            if save_state.active
                collision.id = save_state.id
                collision.active = save_state.active
                collision.pen = save_state.pen

                collision.x = save_state.x
                collision.y = save_state.y
                collision.z = save_state.z

                collision.nx = save_state.nx
                collision.ny = save_state.ny
                collision.nz = save_state.nz

                collision.type = save_state.type
                collision.collider1 = save_state.collider1
                collision.collider2 = save_state.collider2
                collision.vertex = save_state.vertex
                collision.vertex1 = save_state.vertex1
                collision.vertex2 = save_state.vertex2
                collision.nvert1 = save_state.nvert1
                collision.nvert2 = save_state.nvert2
                collision.block_x = save_state.block_x
                collision.block_y = save_state.block_y
                collision.block_z = save_state.block_z
                collision.lnx = save_state.lnx
                collision.lny = save_state.lny
                collision.lnz = save_state.lnz
                collision.ox = save_state.ox
                collision.oy = save_state.oy
                collision.oz = save_state.oz
                collision.ex = save_state.ex
                collision.ey = save_state.ey
                collision.ez = save_state.ez
            end
        end
    end
end

function apply_buoyancy()
    # Apply gravity, integrate linear/angular velocity
    for collider = 1 to max_collider
        with
            $(collider) = collider
        do
            define name collider = "collider_$(collider)"
            if not collider.sleeping
                water_here = False
                with
                    $(x) = collider.x / $Precision
                    $(y) = collider.y / $Precision
                    $(z) = collider.z / $Precision
                do
                    /$execute if block $(x) $(y) $(z) minecraft:water run scoreboard players set Global water_here 1
                end

                if water_here
                    unless collider.buoyancy
                        collider.buoyancy = 200
                    end

                    water_above = False
                    with
                        $(y) = collider.y / $Precision + 1
                    do
                        /$execute if block $(x) $(y) $(z) minecraft:water run scoreboard players set Global water_above 1
                    end

                    if water_above
                        submerged = $Precision
                    else
                        submerged = $Precision - collider.y % $Precision
                    end

                    collider.velocity_y += submerged * collider.buoyancy / $Precision

                    collider.velocity_x *= 9
                    collider.velocity_x /= 10
                    collider.velocity_y *= 9
                    collider.velocity_y /= 10
                    collider.velocity_z *= 9
                    collider.velocity_z /= 10

                    collider.rotation_x *= 9
                    collider.rotation_x /= 10
                    collider.rotation_y *= 9
                    collider.rotation_y /= 10
                    collider.rotation_z *= 9
                    collider.rotation_z /= 10

                    collider_wake_up() with macros
                end
            end
        end
    end
end
