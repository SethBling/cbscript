dir "TetherBlock"
desc "TetherBlock game"
scale 1000

import common
import math
import colliders

@Interaction = @Entity[type=interaction]

@TetherBlock = @PhysicsBlock[tag=TetherBlock]
@GravityBlock = @PhysicsBlock[tag=GravityBlock]

define @PlayerInteraction = @Interaction[tag=PlayerInteraction]
    create {width:3, height:3, teleport_duration:1, Tags:["PlayerInteraction"]}
end

define @RopeSegment = @Entity[type=block_display,tag=RopeSegment]
    create {block_state: {Name: "minecraft:brown_concrete", count: 0b}, teleport_duration: 0, interpolation_duration: 0, transformation:{left_rotation: [0f, 0f, 0f, 1f], translation: [0f, 0f, 0f], right_rotation: [0f, 0f, 0f, 1f], scale:[0.05f, 0.05f, 0.05f]}, Tags:["RopeSegment"]}
    
    tele_dur: teleport_duration int 1
    interp_dur = interpolation_duration int 1
end

$Precision = 1000
$Half = 500
$Billion = 1000000000
$AttackRange = 10000
$GravityRange = 5000
$PunchPower = 1000

$PoleBase = 56000
$SpringConstant = 100

$Unwrapped = 1
$ClockXPosZPos = 2
$ClockXNegZPos = 3
$ClockXNegZNeg = 4
$ClockXPosZNeg = 5
$ClockMin = $ClockXPosZPos
$ClockMax = $ClockXPosZNeg
$CounterXPosZPos = 6
$CounterXPosZNeg = 7
$CounterXNegZNeg = 8
$CounterXNegZPos = 9
$CounterMin = $CounterXPosZPos
$CounterMax = $CounterXNegZPos

reset
    /scoreboard objectives add absorbed minecraft.custom:minecraft.damage_dealt_absorbed
    
    /scoreboard objectives add normal_game trigger
    /scoreboard objectives add prev_game trigger
    /scoreboard objectives add next_game trigger
    /scoreboard objectives add restart_game trigger

    initialize_transforms()
    
    tell @a "{G[\[Normal Game\]](/trigger normal_game set 1) {C[\[Prev Game\]](/trigger prev_game set 1) [\[Next Game\]](/trigger next_game set 1) {Y[\[Restart Game\]](/trigger restart_game set 1)"
end

function clear_game()
    for $y in $range(56, 81)
        /fill -30 $y -30 30 $y 30 minecraft:air
    end
    /fill -30 55 -30 30 55 30 minecraft:grass_block
    /fill -30 52 -30 30 54 30 minecraft:dirt
    destroy_colliders()
    /kill @RopeSegment
    /kill @PlayerInteraction
    PunchPower = 1000
    CubeSize = 1500
    CubeInvMass = 800
    CubeInvRotInt = 200
    GravityGun = False
    @Player.gravity_cube = None
    
    /bossbar remove score
    /bossbar add score ["Score"]
    /bossbar set score players @a
    /bossbar set score max 100
    /bossbar set score value 50
end

function finalize_game()
    TetherX = 500+PoleRadius
    TetherY = $PoleBase + PoleHeight
    TetherZ = 500

    @TetherBlock.free_length = TetherLength
end

function add_tether_block(x, y, z)
    add_collider(x, y, z) with macros
    as @PhysicsBlock if @s.collider_id == id
        /tag @s add TetherBlock
    end
end

function add_gravity_block(x, y, z)
    add_collider(x, y, z) with macros
    as @PhysicsBlock if @s.collider_id == id
        /tag @s add GravityBlock
    end
end

function start_normal_game()
    clear_game()
    
    gamemode = 1
    
    /fill 0 56 0 0 67 0 minecraft:birch_fence
    
    PoleRadius = 125
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    with
        $(block_name) = "target"
    add_tether_block(1000, 60000, 1000)
    
    /bossbar set score name "<-Counter    Normal    Clockwise->"

    finalize_game()
end

function start_multi_game()
    clear_game()
    
    gamemode = 5

    /fill 0 56 0 0 67 0 minecraft:birch_fence
    
    PoleRadius = 125
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    with
        $(block_name) = "target"
    add_tether_block(1000, 60000, -2000)

    with
        $(block_name) = "red_wool"
    add_tether_block(1000, 60000, 0)

    with
        $(block_name) = "cyan_wool"
    add_tether_block(1000, 60000, 2000)

    /bossbar set score name "<-Counter    Multi    Clockwise->"

    finalize_game()
end

function start_fat_game()
    clear_game()
    
    gamemode = 2

    
    /fill 0 56 0 0 67 0 minecraft:birch_planks
    
    PoleRadius = 500
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    with
        $(block_name) = "target"
    add_tether_block(2000, 60000, 0)

    /bossbar set score name "<-Counter    Fat    Clockwise->"

    finalize_game()
end

function start_obese_game()
    clear_game()
    
    gamemode = 3
    
    /fill -1 56 -1 1 67 1 minecraft:birch_planks
    
    PoleRadius = 1500
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    with
        $(block_name) = "target"
    add_tether_block(2000, 60000, 0)

    /bossbar set score name "<-Counter    Obese    Clockwise->"
    
    finalize_game()
end

function start_cup_game()
    clear_game()
    
    gamemode = 4

    PunchPower = 3000
    
    /fill -4 68 -4 4 71 4 minecraft:black_stained_glass
    /fill -3 69 -3 3 71 3 minecraft:air
    /fill 0 56 0 0 75 0 minecraft:birch_fence
    
    PoleRadius = 125
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    with
        $(block_name) = "target"
    add_tether_block(1000, 60000, 1000)

    /bossbar remove score

    finalize_game()
end

function start_water_game()
    clear_game()
    
    gamemode = 6

    /fill -9 56 -9 9 64 9 minecraft:water
    /fill 0 56 0 0 67 0 minecraft:birch_fence
    
    PoleRadius = 125
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    with
        $(block_name) = "target"
    add_tether_block(1000, 60000, 1000)

    /bossbar set score name "<-Counter    Water    Clockwise->"
    
    finalize_game()
end

function start_gravity_game()
    clear_game()
    
    gamemode = 7
    
    /fill 0 56 0 0 67 0 minecraft:birch_fence
    
    PoleRadius = 125
    PoleDiameter = PoleRadius * 2
    PoleHeight = 12000
    TetherLength = 8000

    GravityGun = True

    with
        $(block_name) = "target"
    add_tether_block(1000, 60000, 1000)
    
    CubeSize = $Precision
    CubeInvRotInt = 400
    CubeInvMass = 200

    /bossbar set score name "<-Counter    Gravity Gun    Clockwise->"
    
    finalize_game()
end

$MaxGame = 7
function start_selected_game()
    switch gamemode
        case 1
            start_normal_game()
        end
        case 2
            start_fat_game()
        end
        case 3
            start_obese_game()
        end
        case 4
            start_cup_game()
        end
        case 5
            start_multi_game()
        end
        case 6
            start_water_game()
        end
        case 7
            start_gravity_game()
        end
    end
end

clock tick
    /kill @Position
    create @Position
    
    as @Player at @s ~ ~ ~
        if @s.id
            id = @s.id
        else
            player_id++
            @s.id = player_id
            id = player_id
        end
    
        as @PlayerInteraction if @s.id == id
            /tp @s ~ ~ ~
        else
            as create @PlayerInteraction
                @s.id = id
            end
        end
        
        if @s.normal_game
            start_normal_game()
            @s.normal_game = False
        end
        
        if @s.next_game
            gamemode++
            if gamemode > $MaxGame
                gamemode = 1
            end
            start_selected_game()
        
            @s.next_game = False
        end
        
        if @s.prev_game
            gamemode--
            if gamemode < 1
                gamemode = $MaxGame
            end
            start_selected_game()

            @s.prev_game = False
        end

        if @s.restart_game
            unless gamemode
                gamemode = 1
            end
            
            start_selected_game()

            @s.restart_game = False
        end
        
        /scoreboard players enable @s normal_game
        /scoreboard players enable @s prev_game
        /scoreboard players enable @s next_game
        /scoreboard players enable @s restart_game
    end
    
    as @PlayerInteraction
        id = @s.id
        as @Player if @s.id == id
        else
            /kill @s
        end
    end
    
    as @PlayerInteraction
        on attacker
            at @s eyes
                /tp @Position ^ ^ ^
                world_eye_x = @Position.x
                world_eye_y = @Position.y
                world_eye_z = @Position.z
                
                /tp @Position ^ ^ ^1
                world_eye_dx = @Position.x - world_eye_x
                world_eye_dy = @Position.y - world_eye_y
                world_eye_dz = @Position.z - world_eye_z
            end
            
            if GravityGun
                if @s.gravity_cube
                    gravity_cube = @s.gravity_cube
                    with
                        $(collider) = @s.gravity_cube
                    do
                        define name collider = "collider_$(collider)"
                        collider.velocity_x = world_eye_dx
                        collider.velocity_y = world_eye_dy
                        collider.velocity_z = world_eye_dz
                        collider_wake_up() with macros
                        
                        as @GravityBlock if @s.collider_id == gravity_cube
                            @s.free = True
                        end
                        
                        @s.gravity_cube = None
                    end
                else
                    get_targeted_block()
                    
                    if t < $GravityRange
                        x = x / $Precision * $Precision + $Half
                        y = y / $Precision * $Precision + $Half
                        z = z / $Precision * $Precision + $Half
                        
                        got_block = False

                        at @Position
                            if block ~ ~ ~ grass_block
                                with
                                    $(block_name) = "grass_block"
                                add_gravity_block(x, y, z)
                                got_block = True
                            end
                            if block ~ ~ ~ dirt
                                with
                                    $(block_name) = "dirt"
                                add_gravity_block(x, y, z)
                                got_block = True
                            end

                            if got_block
                                /setblock ~ ~ ~ air
                                @s.gravity_cube = id
                            end
                        end
                    end
                end
            else        
                min_col_t = $Billion

                # Find the nearest collider in the direction of the cursor ray
                for collider = 1 to max_collider
                    with
                        $(collider) = collider
                    do
                        define name collider = "collider_$(collider)"

                        if collider_ray_intersection(world_eye_x, world_eye_y, world_eye_z, world_eye_dx, world_eye_dy, world_eye_dz) with macros
                            if t < min_col_t
                                min_col_t = t
                                min_x = collision_x
                                min_y = collision_y
                                min_z = collision_z
                                min_col = collider
                            end
                        end
                    end
                end
                
                if min_col_t <= $AttackRange
                    # There was a ray intersection
                    
                    @s.attacking = min_col
                    @s.attack_x = min_x
                    @s.attack_y = min_y
                    @s.attack_z = min_z
                    @s.attack_dx = world_eye_dx
                    @s.attack_dy = world_eye_dy
                    @s.attack_dz = world_eye_dz
                    
                end
            end
        end
        /data remove entity @s attack
        /data remove entity @s interaction
    end
    
    as @Player
        if @s.attacking
            with
                $(collider) = @s.attacking
            collider_apply_impulse(@s.attack_x, @s.attack_y, @s.attack_z, @s.attack_dx * PunchPower / scale, @s.attack_dy * PunchPower / scale, @s.attack_dz * PunchPower / scale)

            @Position.<pos> = <@s.attack_x, @s.attack_y, @s.attack_z>
            at @Position
                /particle minecraft:explosion ~ ~ ~ 0 0 0 0 1 force
                /playsound minecraft:entity.generic.small_fall block @a ~ ~ ~ 1 0
            end
        
            @s.attacking = 0
        end
        
        if @s.gravity_cube
            at @s eyes
                /tp @Position ^ ^ ^
                world_eye_x = @Position.x
                world_eye_y = @Position.y
                world_eye_z = @Position.z
                
                /tp @Position ^ ^ ^1
                world_eye_dx = @Position.x - world_eye_x
                world_eye_dy = @Position.y - world_eye_y
                world_eye_dz = @Position.z - world_eye_z
            end        
            
            hover_x = world_eye_x + world_eye_dx * 3
            hover_y = world_eye_y + world_eye_dy * 3
            hover_z = world_eye_z + world_eye_dz * 3
            
            with
                $(collider) = @s.gravity_cube
            do
                define name collider = "collider_$(collider)"
                
                collider.velocity_x /= 2
                collider.velocity_y /= 2
                collider.velocity_z /= 2
                
                collider.velocity_x += (hover_x - collider.x) / 2
                collider.velocity_y += (hover_y - collider.y) / 2
                collider.velocity_z += (hover_z - collider.z) / 2

                collider_wake_up() with macros
            end
        end
    end
    
    as @GravityBlock if @s.free at @s unless block ~ ~-0.6 ~ passthrough
        with
            $(collider) = @s.collider_id
        destroy_collider()
        /setblock ~ ~ ~ grass_block
        /kill @s
    end

    as @TetherBlock
        id = @s.collider_id
        segments = @s.segments
        free_length = @s.free_length
        as @RopeSegment if @s.id == id and @s.segment == segments
            spring_x = @s.origin_x
            spring_y = @s.origin_y
            spring_z = @s.origin_z
            spring_neutral = free_length
            spring_constant = $SpringConstant
            local_att_x = 0
            local_att_y = CubeSize / 2
            local_att_z = 0
            
            with
                $(collider) = id
            collider_apply_spring_cable(spring_x, spring_y, spring_z, spring_neutral, spring_constant, local_att_x, local_att_y, local_att_z)
        end
    end
        
    colliders_physics_tick()
    colliders_get_new_collisions()
    colliders_resolve_collisions()
    colliders_finalize_tick()
    
    total_score = 0
    score_count = 0
    
    as @TetherBlock at @s ~ ~-1.5 ~
        id = @s.collider_id
        segments = @s.segments
        free_length = @s.free_length
        
        as @RopeSegment if @s.id == id and @s.segment == segments
            # Handle the last segment
            
            with
                $(collider) = id
            collider_local_to_world(0, 750, 0, True)
            
            dx = world_x - @s.origin_x
            dy = world_y - @s.origin_y
            dz = world_z - @s.origin_z
            new_wrap_state = None
            unwrap = False
            
            switch @s.wrap_state
                case $Unwrapped
                    if dx < 0
                        if dz > 0
                            wrapped_portion = PoleRadius * 1000 / dz
                            wrap_x = 500 + PoleRadius
                            wrap_z = 500 + PoleRadius
                            new_wrap_state = $ClockXNegZPos
                        else
                            wrapped_portion = PoleRadius * 1000 / -dz
                            wrap_x = 500 + PoleRadius + 50
                            wrap_z = 500 - PoleRadius - 50
                            new_wrap_state = $CounterXNegZNeg
                        end
                    end
                end
                case $ClockXPosZPos
                    if dz < 0
                        # Unwrap
                        unwrap = True                        
                    else if dx < 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / dz
                        wrap_x = 500 + PoleRadius
                        wrap_z = 500 + PoleRadius
                        new_wrap_state = $ClockXNegZPos
                    end
                end
                case $ClockXNegZPos
                    if dx > 0
                        # Unwrap
                        unwrap = True
                    else if dz < 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / -dx
                        wrap_x = 500 - PoleRadius
                        wrap_z = 500 + PoleRadius
                        new_wrap_state = $ClockXNegZNeg
                    end
                end
                case $ClockXNegZNeg
                    if dz > 0
                        # Unwrap
                        unwrap = True
                    else if dx > 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / -dz
                        wrap_x = 500 - PoleRadius
                        wrap_z = 500 - PoleRadius
                        new_wrap_state = $ClockXPosZNeg
                    end
                end
                case $ClockXPosZNeg
                    if dx < 0
                        # Unwrap
                        unwrap = True
                    else if dz > 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / dx
                        wrap_x = 500 + PoleRadius
                        wrap_z = 500 - PoleRadius
                        new_wrap_state = $ClockXPosZPos
                    end
                end
                
                case $CounterXPosZPos
                    if dx < 0
                        # Unwrap
                        unwrap = True                        
                    else if dz < 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / dx
                        wrap_x = 500 + PoleRadius + 50
                        wrap_z = 500 + PoleRadius + 50
                        new_wrap_state = $CounterXPosZNeg
                    end
                end
                case $CounterXPosZNeg
                    if dz > 0
                        # Unwrap
                        unwrap = True
                    else if dx < 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / -dz
                        wrap_x = 500 + PoleRadius + 50
                        wrap_z = 500 - PoleRadius - 50
                        new_wrap_state = $CounterXNegZNeg
                    end
                end
                case $CounterXNegZNeg
                    if dx > 0
                        # Unwrap
                        unwrap = True
                    else if dz > 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / -dx
                        wrap_x = 500 - PoleRadius - 50
                        wrap_z = 500 - PoleRadius - 50
                        new_wrap_state = $CounterXNegZPos
                    end
                end
                case $CounterXNegZPos
                    if dz < 0
                        # Unwrap
                        unwrap = True
                    else if dx > 0
                        # Wrap
                        wrapped_portion = PoleDiameter * 1000 / dz
                        wrap_x = 500 - PoleRadius - 50
                        wrap_z = 500 + PoleRadius + 50
                        new_wrap_state = $CounterXPosZPos
                    end
                end
            end
            
            if new_wrap_state
                wrapped_dy = dy * wrapped_portion / 1000
                wrap_y = @s.origin_y + wrapped_dy

                # Compute the stretched length of the unbound tether
                len = sqrt(dx*dx + dy*dy + dz*dz)
            
                # Compute the amount of tether that's bound
                stretched_length = wrapped_portion * len / 1000
                bound_length = wrapped_portion * free_length / 1000
                free_length -= bound_length

                @s.bound_length = bound_length
                
                if Debug
                    tell @a "Wrapping..."
                    tell @a "new_wrap_state: (new_wrap_state)"
                    tell @a "wrapped_portion: (wrapped_portion)"
                    tell @a "wrap_xyz: (wrap_x), (wrap_y), (wrap_z)"
                    tell @a "stretched_length: (stretched_length)"
                    tell @a "free_length: (free_length)"
                end

                stretched_length += 50
                # Position current segment as bound
                /data modify storage $namespace:global scale set value [0.05f, 0.05f, 0.05f]
                /execute store result storage $namespace:global scale[2] float 0.001 run scoreboard players get Global stretched_length
                /data modify entity @s transformation.scale set from storage $namespace:global scale
                /data modify entity @s start_interpolation set value 0b
                
                @s.interp_dur = 0
                @s.tele_dur = 0
                
                bdx = wrap_x - @s.origin_x
                bdy = wrap_y - @s.origin_y
                bdz = wrap_z - @s.origin_z
                bl = sqrt(bdx*bdx + bdy*bdy + bdz*bdz)
                ix = bdx * 25 / bl
                iy = bdy * 25 / bl
                iz = bdz * 25 / bl
                
                @Position.<pos> = <@s.origin_x-ix, @s.origin_y-iy, @s.origin_z-iz>
                at @Position
                    @Position.<pos> = <wrap_x+ix, wrap_y+iy, wrap_z+iz>
                    facing @Position
                        /tp @s ~ ~ ~ ~ ~
                    end
                end
                
                at @Position
                    as create @RopeSegment
                        segments++
                        @s.id = id
                        @s.segment = segments
                        @s.origin_x = wrap_x
                        @s.origin_y = wrap_y
                        @s.origin_z = wrap_z
                        @s.wrap_state = new_wrap_state
                    end
                end
            end
            
            if unwrap
                /kill @s
                segments--
                as @RopeSegment if @s.id == id and @s.segment == segments
                    free_length += @s.bound_length
                end
            end
        end
        
        @s.segments = segments
        @s.free_length = free_length
        
        as @RopeSegment if @s.id == id and @s.segment == segments
            if not new_wrap_state
                dx = world_x - @s.origin_x
                dy = world_y - @s.origin_y
                dz = world_z - @s.origin_z

                len = sqrt(dx*dx + dy*dy + dz*dz)
                
                /data modify storage $namespace:global scale set value [0.05f, 0.05f, 0.05f]
                /execute store result storage $namespace:global scale[2] float 0.001 run scoreboard players get Global len
                /data modify entity @s transformation.scale set from storage $namespace:global scale
                /data modify entity @s start_interpolation set value 0b
                
                @s.tele_dur = 1
                @s.interp_dur = 1
            end
                
            @Position.<pos> = <@s.origin_x, @s.origin_y, @s.origin_z>
            at @Position            
                @Position.<pos> = <world_x, world_y, world_z>
                facing @Position
                    /tp @s ~ ~ ~ ~ ~
                end
            end
            
            if @s.wrap_state >= $ClockMin and @s.wrap_state <= $ClockMax
                total_score += 110 - free_length * 60 / TetherLength
            else if @s.wrap_state >= $CounterMin and @s.wrap_state <= $CounterMax
                total_score += -10 + free_length * 60 / TetherLength
            else
                total_score += 50
            end
            score_count++
        else
            as create @RopeSegment
                @s.segment = 1
                @s.id = id
                @s.origin_x = TetherX
                @s.origin_y = TetherY
                @s.origin_z = TetherZ
                @s.wrap_state = $Unwrapped
            end
            
            @s.segments = 1
        end
    end
    
    total_score /= score_count
    /execute store result bossbar score value run scoreboard players get Global total_score
end

function get_targeted_block()
    dx = world_eye_dx
    dy = world_eye_dy
    dz = world_eye_dz
    
    if dx == 0 then dx = 1
    if dy == 0 then dy = 1
    if dz == 0 then dz = 1

    x = world_eye_x
    y = world_eye_y
    z = world_eye_z
    
    next_x = x / $Precision * $Precision
    if dx > 0
        next_x += $Precision
    else
        next_x -= 1   
    end
    
    next_y = y / $Precision * $Precision
    if dy > 0
        next_y += $Precision
    else
        next_y -= 1
    end
    
    next_z = z / $Precision * $Precision
    if dz > 0
        next_z += $Precision
    else
        next_z -= 1
    end
    
    t = 0

    next_t_x = (next_x - world_eye_x) * $Precision / dx
    next_t_y = (next_y - world_eye_y) * $Precision / dy
    next_t_z = (next_z - world_eye_z) * $Precision / dz
    
    @Position.<pos> = <x, y, z>
    
    for i = 1 to 100
        at @Position if block ~ ~ ~ passthrough
            if next_t_x < next_t_y and next_t_x < next_t_z
                t = next_t_x

                x = next_x
                y = world_eye_y + world_eye_dy * t / $Precision 
                z = world_eye_z + world_eye_dz * t / $Precision 
                
                if dx > 0
                    next_x += $Precision
                else
                    next_x -= $Precision
                end

                next_t_x = (next_x - world_eye_x) * $Precision / dx
            else if next_t_y < next_t_z
                t = next_t_y

                x = world_eye_x + world_eye_dx * t / $Precision 
                y = next_y
                z = world_eye_z + world_eye_dz * t / $Precision 
                
                if dy > 0
                    next_y += $Precision
                else
                    next_y -= $Precision
                end

                next_t_y = (next_y - world_eye_y) * $Precision / dy
            else
                t = next_t_z

                x = world_eye_x + world_eye_dx * t / $Precision 
                y = world_eye_y + world_eye_dy * t / $Precision 
                z = next_z
                
                if dz > 0
                    next_z += $Precision
                else
                    next_z -= $Precision
                end
                
                next_t_z = (next_z - world_eye_z) * $Precision / dz
            end
                
            @Position.<pos> = <x, y, z>
        else
            # Non-passthrough block
            i = $Billion
        end
    end
end
